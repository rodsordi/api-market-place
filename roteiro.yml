Treinamento:
  Titulo: Testes de Integração de back-ends(APIs)

  Pre-requisitos:
    Environment Variables:
      - Adicionar no sistema operacional a seguinte variável de ambiente: AWS_REGION=us-east-1

  Aula 1:
    Titulo: Estruturando testes usando JUnit 5
    Objetivos:
      - Entender como a arquitetura de aplicação afeta os testes de unidade
      - Usar o TDD no processo de desenvolvimento de testes usando factories e assertions nos mappers e DTOs
      - Estruturar a organização dos testes com JUnit 5
      - Conhecer algumas features auxiliares de testes para maior organização e celeridade
    Pré-requisitos:
      - Java 21 (LTS)
      - Maven
      - Spring Boot 3
      - MapStruct
    Tecnologias/Ferramentas:
      Junit5:
        - Nested, Befores, Afters, DisplayName
        - ParametrizedTest
        - AssertThrows
      Mockito:
        - Static Mock
      Assertj:
        - Semântica
        - Collections
      SpringBootTest:
        - TestConfiguration
        - MockMvc
        - EntityManagerTest

    Vídeo 1.1:
      Titulo: Apresentação
      Tipo: Contexto
      Competências e habilidades:
        - Conhecer os temas e objetivos da aula
        - Entender as vantagens de criar testes
      Roteiro:
        - Apresentação e audiodescrição da pessoa instrutora.
        - Apresentar testes de unidade.
        - Explicar que precisamos conhecer spring-boot préviamente.
        - Explicar que não vamos criar implementações e sim testar as implementações que vão ser disponibilizadas.

    Vídeo 1.2:
      Titulo: Entendendo a arquitetura de sistemas
      Tipo: Contexto
      Competências e habilidades:
        - Compreender a arquitetura adotada do sistema
        - Se planejar para implementar a arquitetura
      Roteiro:
        - Apresentar uma implementação de arquitetura limpa. (https://www.alura.com.br/conteudo/arquitetura-java-descomplicando-clean-architecture?srsltid=AfmBOooSXmBqbWC7vIpyDOnGKDizrkDYLfPl9Yy40U95dWpN4hZUKZHC)
        - Explicar como a especificação da arquitetura pode nos direcionar na implementação, porém não precisamos seguir literalmente. (https://drive.google.com/file/d/1vqPmeSoYabbF2-T919VrUXaIzdJ-dOcG/view?usp=sharing)
        - Explicar sobre maven multi-module. (./pom.xml)

    Vídeo 1.3:
      Titulo: Impacto de arquitetura de sistemas nos testes
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender o impacto da implementação da arquitetura nos testes
        - Respeitar as camadas definidas
      Roteiro:
        - Exemplificar classe referenciada em camada errada. (ExemploComponenteNoLugarErrado)
        - Mostrar que essa classe no local errado impacta os testes. (ExemploComponenteNoLugarErradoTest)

    Vídeo 1.4:
      Titulo: JUnit5
      Tipo: Contexto
      Competências e habilidades:
        - Saber configurar o JUnit5
        - Saber executar um teste no IntelliJ
      Roteiro:
        - Explicar que o JUnit5 é a versão mais recente do JUnit e que é amplamente utilizado no ecossistema Spring.
        - Explicar que o JUnit5 traz diversas melhorias em relação ao JUnit4, como uma API mais fluida, integração com IDE e suporte a novas funcionalidades.
        - Explicar que o JUnit5 é contemplado pelo spring-boot-starter-test. (./pom.xml)
        - Apresentar o @Nested e @DisplayName (CadastroProdutoUseCaseTest)
        - Apresentar o @BeforeAll, @BeforeEach, @AfterAll e @AfterEach
        - Apresentar o @Disable (ExemploControllerTest)

    Vídeo 1.5:
      Titulo: Mappers
      Tipo: Contexto
      Competências e habilidades:
        - Saber se planejar antes de desenvolver
        - Entender o papel dos mappers
        - Saber seguir padrões e especificações
      Roteiro:
        - Explicar como vamos criando rotinas de passos sequenciais na hora de desenvolver.
        - Apresentar os componentes Mappers, Dtos e Entities (ProdutoDtoMapper)
        - Explicar como a implementação de classes e da arquitetura pode ser feita de várias formas, mas que é importante respeitar a especificação.
        - Explicar o anti-padrão modelo anêmico (ProdutoDto, Produto)
        - Explicar a estrutura Dado, Quando, Então
        - Criar o teste do mapper sem factories e nenhum tipo de assertions (ProdutoDtoMapperTest)

    Vídeo 1.6:
      Titulo: Semantica nas afirmações
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender os assertions
      Roteiro:
        - Explicar que é interessante ter testes legíveis
        - Apresentar o AssertJ
        - Exemplificar Assert com primitivos
        - Exemplificar Assert com collections
        - Explicar que esse modelo evidencia que o trabalho realizado foi atingido com sucesso e serve como prova real de que funciona

    Vídeo 1.7:
      Titulo: Processo de desenvolvimento e TDD
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender como organizar o código de testes
        - Entender como usar os padrões de desenvolvimento para solucionar problemas
      Roteiro:
        - Explicar que precisamos nos condicionar à seguir um processo de desenvolvimento e que precisamos de ferramentas que nos ajudem a seguir esse processo.
        - Mostrar que o TDD pode ser um laboratório no momento da implementação.
        - Explicar como os testes podem ficar grandes e repetitivos.
        - Explicar sobre centralização de código, manutenibilidade  e reutilização.
        - Apresentar o conceito de Factory
        - Apresentar um novo conceito de camada de Assertions

    Vídeo 1.8:
      Titulo: Casos de Uso
      Tipo: Contexto
      Competências e habilidades:
        - Compreender as vantagens de criar mais classes paralelas ao invés de centralizar tudo em uma classe de serviço
      Roteiro:
        - Explicar como organizar nossas classes de negócio em casos de uso e as vantagens disso.
        - Explicar que como cada caso de uso é uma classe, há menos conflitos de merge dado um projeto com vários desenvolvedores, além de ter uma classe de teste para cada caso de uso.
        - Apresentar um caso de uso com dependências @Autowired (CadastroProdutoUseCase)

    Vídeo 1.9:
      Titulo: Casos de Uso
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender por que não devemos usar @Autowired
        - Entender como usar @ExtendWith com Mockito
        - Entender como usar @InjectMocks
      Roteiro:
        - Criar teste de caso de uso. (CadastroProdutoUseCaseTest)
        - Explicar sobre o @Autowired e como refatorar para variáveis finais.
        - Explicar sobre o @ExtendWith com Mockito e como ele pode ser utilizado para injetar dependências nos testes.

    Vídeo 1.10:
      Titulo: Cenários de falha
      Tipo: Problema/Solução
      Competências e habilidades:
        - Estruturar cenários de falha
      Roteiro:
        - Criar teste de caso de uso com cenário de falha. (CadastroProdutoUseCaseTest)
        - Explicar sobre o AssertThrows

    Vídeo 1.11:
      Titulo: Teste parametrizado
      Tipo: Problema/Solução
      Competências e habilidades:
        - Saber como criar testes parametrizados
      Roteiro:
        - Configurar dependências do ParametrizedTest (CadastroProdutoUseCaseTest)
        - Explicar o conceito de testes parametrizados
        - Criar teste parametrizado com Enum
        - Criar teste parametrizado com CSV

    Vídeo 1.12:
      Titulo: Teste de integração na camada controller
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender a importância dos testes de integração na camada controller
        - Entender como configurar de maneira eficiente os testes de integração na camada controller
      Roteiro:
        - Explicar que os testes de integração em escopo de unidade não são dispensáveis, ainda ajudam com cobertura de código e TDD
        - Configurar o MockMvc (RestControllerTestConfig)
        - Criar teste de integração na camada controller (ProdutoControllerTest)
        - Criar cenário de falha (ExceptionAdvice)

    Vídeo 1.13:
      Titulo: Teste de integração na camada repository
      Tipo: Problema/Solução
      Competências e habilidades:
        -
      Roteiro:
        - Adicionar dependência H2 (infra/pom.xml)
        - Criar configuração jpa (JpaConfig)
        - Configurar teste (infra/application-test.properties)
        - Criar teste para salvar produto (ProdutoRepositoryTest)
        - Criar teste para consultar produtos com filtros

    Vídeo 1.14:
      Titulo: Conclusão
      Tipo: Contexto
      Competências e habilidades:
        - Recapitular os temas abordados
      Roteiro:
        - Recapitular testes de unidade
        - Recapitular impacto da arquitetura nos testes
        - Recapitular a importância de se planejar usando processos de desenvolvimento
        - Recapitular JUnit5
        - Comentar sobre próximos passos

  Aula 2:
    Titulo: Testes de integração em APIs back-end com spring boot
    Objetivos:
      - Compreender o papel dos testes de integração em APIs back-end
      - Estruturar testes de integração de banco de dados usando containers
      - Mocar integrações HTTP usando WireMock
    Pré-requisitos:
      - Flyway
      - Feign
      - Docker
      - RabbitMQ
    Tecnologias/Ferramentas:
      Maven:
        - dependências
        - profiles
        - plugin skip tests
      SpringBootTest:
        - DynamicPropertySource
        - ContextConfiguration
      TestContainers:
        - Setup
        - LocalStack, Postgres
        - Redis
        - Flyway config
      WireMock:
        - stubs, equal, regex, path
      Rest Assured:
        - get, post, patch, delete
        - header, query params, path variables

    Vídeo 2.1:
      Titulo: Apresentação
      Tipo: Contexto
      Competências e habilidades:
        - Conhecer os temas abordados
      Roteiro:
        - Apresentação e audiodescrição da pessoa instrutora.
        - Apresentar testes de integração.
        - Apresentar pirâmide de testes e explicar ganhos. (https://www.alura.com.br/artigos/testes-automatizados?srsltid=AfmBOooMOjuMcjDJdL4DF2z16mGTx22ODv9jN3uHfHsVDWz_BIQfyNq8)
        - Explicar que deve ter conhecimento prévio de docker, flyway, cache, mensageria

    Vídeo 2.2:
      Titulo: Testcontainers
      Tipo: Contexto
      Competências e habilidades:
        - Entender testes de integração
        - Conhecer nova ferramenta
      Roteiro:
        - Explicar que o teste container é uma ferramenta para substituir mocks e serviços em memória (https://testcontainers.com/guides/getting-started-with-testcontainers-for-java/)
        - Explicar prós e contras de teste de integração em memória vs reais

    Vídeo 2.3:
      Titulo: Rest Assured
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender estrutura rest assured
      Roteiro:
        - Comentar dependências
        - Configurar h2
        - Setup maven (iandt/pom.xml)
        - Estruturar teste (CadastroProdutoTest)
        - Executar teste

    Vídeo 2.4:
      Titulo: Localstack (Testcontainers)
      Tipo: Problema/Solução
      Competências e habilidades:
        - Conhecer estrutura localstack
      Roteiro:
        - Apresentar chamada (CadastroProdutoUseCase)
        - Descomentar dependências
        - Setup (https://java.testcontainers.org/modules/localstack/)
        - Setup maven (iandt/pom.xml)
        - Setup config (LocalstackSetup)
        - Setup properties (iandt/resources/application-test.properties
        - Implementar test

    Vídeo 2.5:
      Titulo: Wiremock
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender estrutura wiremock
      Roteiro:
        - Apresentar chamada (CadastroProdutoUseCase)
        - Descomentar dependências
        - Setup maven (iandt/pom.xml)
        - Setup properties (iandt/resources/application-test.properties
        - Implementar test

    Vídeo 2.6:
      Titulo: Postgres (Testcontainers) com Flyway
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender flyway e estrutura banco
      Roteiro:
        - Apresentar chamada (CadastroProdutoUseCase)
        - Descomentar dependências
        - Apresentar flyway (infra/resources/db/migrations.sql)
        - Setup (https://java.testcontainers.org/modules/databases/postgres/)
        - Setup maven (iandt/pom.xml)
        - Setup config (PostgresSetup)
        - Setup properties (iandt/resources/application-test.properties
        - Implementar test
        - Executar teste com breakpoint e validar mensagem postada na fila ()

    Vídeo 2.7:
      Titulo: RabbitMQ (Testcontainers)
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender estrutura rabbitmq
      Roteiro:
        - Apresentar a chamada (CadastroProdutoUseCase)
        - Descomentar dependências
        - Setup (https://testcontainers.com/modules/rabbitmq/)
        - Setup maven (iandt/pom.xml)
        - Setup config (RabbitMQSetup)
        - Setup properties (iandt/resources/application-test.properties
        - Implementar test

    Vídeo 2.8:
      Titulo: Redis (Testcontainers)
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender estrutura redis
      Roteiro:
        - Apresentar implementação no controller (ProdutoController)
        - Setup (https://testcontainers.com/modules/redis/)
        - Setup maven (iandt/pom.xml)
        - Setup config (RedisSetup)
        - Implementar test

    Vídeo 2.9:
      Titulo: Conclusão
      Tipo: Contexto
      Competências e habilidades:
        - Recapitular os temas abordados
      Roteiro:
        - Recapitular testes de integração
        - Recapitular testcontainers
        - Comentar sobre próximos passos

  Aula 3:
    Titulo: Automatização de testes de integração
    Objetivos:
      - Configurar pipeline para execução de testes de integração
      - Criar scripts para execução de testes de integração em pipelines
    Pré-requisitos:
      - Docker
      - GitHub
    Tecnologias/Ferramentas:
      Docker:
        - Docker compose
      GitHub:
        - GitHub Actions

    Vídeo 3.1:
      Titulo: Apresentação
      Tipo: Contexto
      Competências e habilidades:
        - Conhecer os temas abordados
      Roteiro:
        - Apresentação e audiodescrição da pessoa instrutora.
        - Apresentar github actions. (https://docs.github.com/pt/actions/get-started/understand-github-actions)
        - Apresentar pagamento. (https://docs.github.com/pt/actions/concepts/billing-and-usage)

    Vídeo 3.2:
      Titulo: GitHub Actions Maven
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender como funciona o empacotamento com maven no github actions
      Roteiro:
        - Criar build-publish.yml
        - Seguir documentação (https://docs.github.com/pt/actions/tutorials/build-and-test-code/java-with-maven)
        - Criar job (build-publish.yml)
        - Commit, push, actions

    Vídeo 3.3:
      Titulo: GitHub Actions Docker
      Tipo: Problema/Solução
      Competências e habilidades:
        -
      Roteiro:
        - Criar conta no docker hub
        - Apresentar plano gratuito (https://www.docker.com/pricing)
        - Criar Dockerfile
        - Configurar secrets (Settings -> Secrets and variables -> Actions)
        - Apresentar documentação (https://docs.github.com/pt/actions/tutorials/publish-packages/publish-docker-images)
        - Criar job (build-publish.yml)
        
    Vídeo 3.4:
      Titulo: Validando imagem Docker
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender como executar a imagem publicada localmente
      Roteiro:
        - Commit, push, actions
        - Validar imagem publicada no docker hub
        - Criar docker-compose.yml
        - Fazer o pull da imagem construída e executar a imagem

    Vídeo 3.5:
      Titulo: GitHub Actions Testes de Integração
      Tipo: Problema/Solução
      Competências e habilidades:
        - Entender como funciona a execução de testes de integração no github actions
      Roteiro:
        - Explicar que precisamos definir um escopo de execução de testes de integração
        - Configurar o profile integrationTests com maven-surefire-plugin (./pom.xml e iandt/pom.xml)
        - Criar job (build-publish.yml)
        - Commit, push, actions

    Vídeo 3.6:
      Titulo: Conclusão
      Tipo: Contexto
      Competências e habilidades:
        - Recapitular os temas abordados
      Roteiro:
        - Recapitular ci/cd
        - Recapitular benefícios da pipeline de testes de integração